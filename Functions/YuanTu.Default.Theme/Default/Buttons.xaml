<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--  功能按钮  -->
    <SolidColorBrush x:Key="按钮文本颜色">#ffffff</SolidColorBrush>
    <Style x:Key="按钮文本" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Foreground" Value="{StaticResource 按钮文本颜色}" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
    </Style>
    <Color x:Key="确定按钮颜色1">#76b4e9</Color>
    <Color x:Key="确定按钮颜色2">#67a7de</Color>
    <SolidColorBrush x:Key="确定按钮失效颜色">#a8a8a8</SolidColorBrush>
    <LinearGradientBrush x:Key="确定按钮颜色" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="{StaticResource 确定按钮颜色1}" />
            <GradientStop Offset="1" Color="{StaticResource 确定按钮颜色2}" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="确定按钮边框" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource 确定按钮颜色}" />
        <Setter Property="CornerRadius" Value="20" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard
                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 确定按钮颜色1}"
                                        To="{StaticResource 确定按钮颜色2}" />
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard
                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 确定按钮颜色2}"
                                        To="{StaticResource 确定按钮颜色1}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard
                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 确定按钮颜色2}"
                                        To="{StaticResource 确定按钮颜色1}" />
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard
                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 确定按钮颜色1}"
                                        To="{StaticResource 确定按钮颜色2}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource 确定按钮失效颜色}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="确定按钮" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="228" />
        <Setter Property="Height" Value="44" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Style="{StaticResource 确定按钮边框}">
                        <TextBlock Margin="8"
                                   Style="{StaticResource 按钮文本}"
                                   Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                 AncestorType={x:Type Button}},
                                                  Path=Content}" />
                        <!--  {TemplateBinding ContentControl.Content}  -->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Color x:Key="取消按钮颜色1">#ed8787</Color>
    <Color x:Key="取消按钮颜色2">#e27878</Color>
    <SolidColorBrush x:Key="取消按钮失效颜色">#a8a8a8</SolidColorBrush>
    <LinearGradientBrush x:Key="取消按钮颜色" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="{StaticResource 取消按钮颜色1}" />
            <GradientStop Offset="1" Color="{StaticResource 取消按钮颜色2}" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style x:Key="取消按钮边框" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource 取消按钮颜色}" />
        <Setter Property="CornerRadius" Value="20" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard
                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 取消按钮颜色1}"
                                        To="{StaticResource 取消按钮颜色2}" />
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard
                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 取消按钮颜色2}"
                                        To="{StaticResource 取消按钮颜色1}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard
                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 取消按钮颜色2}"
                                        To="{StaticResource 取消按钮颜色1}" />
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard
                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 取消按钮颜色1}"
                                        To="{StaticResource 取消按钮颜色2}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource 取消按钮失效颜色}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="取消按钮" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="228" />
        <Setter Property="Height" Value="44" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Style="{StaticResource 取消按钮边框}">
                        <TextBlock Margin="8"
                                   Style="{StaticResource 按钮文本}"
                                   Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                 AncestorType={x:Type Button}},
                                                  Path=Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="修改按钮边框" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource 确定按钮颜色}" />
        <Setter Property="CornerRadius" Value="5" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 确定按钮颜色1}"
                                        To="{StaticResource 确定按钮颜色2}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 确定按钮颜色2}"
                                        To="{StaticResource 确定按钮颜色1}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="修改按钮" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="79" />
        <Setter Property="Height" Value="36" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Style="{StaticResource 修改按钮边框}">
                        <TextBlock Style="{StaticResource 按钮文本}"
                                   Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="主页返回按钮文本颜色">#76b4e9</SolidColorBrush>
    <Color x:Key="主页返回按钮颜色1">#ffffff</Color>
    <Color x:Key="主页返回按钮颜色2">#e6e6e6</Color>
    <SolidColorBrush x:Key="主页返回按钮失效颜色">#B9B4B4</SolidColorBrush>
    <Style x:Key="主页返回按钮文本" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Foreground" Value="{StaticResource 主页返回按钮文本颜色}" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="FontSize" Value="20" />
    </Style>
    <Style x:Key="主页返回按钮边框" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource 主页返回按钮颜色1}" />
            </Setter.Value>
        </Setter>
        <Setter Property="CornerRadius" Value="20" />

        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard AutoReverse="True"
                                Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 主页返回按钮颜色1}"
                                        To="{StaticResource 主页返回按钮颜色2}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <!--<EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard x:Name="gl">
                    <Storyboard Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">

                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 主页返回按钮颜色2}"
                                        To="{StaticResource 主页返回按钮颜色1}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource 主页返回按钮失效颜色}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="主页返回按钮" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="45" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border IsEnabled="{TemplateBinding Control.IsEnabled}" Style="{StaticResource 主页返回按钮边框}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="翻页按钮文本颜色">#717171</SolidColorBrush>
    <Color x:Key="翻页按钮颜色1">#dadbdd</Color>
    <Color x:Key="翻页按钮颜色2">#e4e4e4</Color>
    <Style x:Key="翻页按钮文本" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Foreground" Value="{StaticResource 翻页按钮文本颜色}" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="FontSize" Value="20" />
    </Style>
    <LinearGradientBrush x:Key="翻页按钮颜色" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="{StaticResource 翻页按钮颜色1}" />
        <GradientStop Offset="1" Color="{StaticResource 翻页按钮颜色2}" />
    </LinearGradientBrush>
    <Style x:Key="翻页按钮边框" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{StaticResource 翻页按钮颜色}" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 翻页按钮颜色1}"
                                        To="{StaticResource 翻页按钮颜色2}" />
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 翻页按钮颜色2}"
                                        To="{StaticResource 翻页按钮颜色1}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 翻页按钮颜色2}"
                                        To="{StaticResource 翻页按钮颜色1}" />
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].Color">
                        <ColorAnimation Duration="0:0:0.2"
                                        From="{StaticResource 翻页按钮颜色1}"
                                        To="{StaticResource 翻页按钮颜色2}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="上一页按钮" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="105" />
        <Setter Property="Height" Value="42" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Clip="M103,0 L17,0 15,1 1,13.5 0,21 1,25.5 15,41 17,42 103,42 105,40 105,2 z"
                          Style="{StaticResource 翻页按钮边框}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="1"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Style="{StaticResource 翻页按钮文本}"
                                   Text="上一页" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="下一页按钮" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="105" />
        <Setter Property="Height" Value="42" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Clip="M2,0 L88,0 90,1 104,13.5 105,21 104,25.5 90,41 88,42 2,42 0,40 0,2 z"
                          Style="{StaticResource 翻页按钮边框}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="10" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Style="{StaticResource 翻页按钮文本}"
                                   Text="下一页" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--后台按钮-->
    <Color x:Key="后台按钮颜色">#ffffff</Color>
    <SolidColorBrush x:Key="后台按钮文本颜色">#333333</SolidColorBrush>
    <SolidColorBrush x:Key="后台按钮失效颜色">#00000000</SolidColorBrush>
    <SolidColorBrush x:Key="后台按钮边框颜色">#ffffff</SolidColorBrush>
    <SolidColorBrush x:Key="后台按钮失效文本颜色">#ffffff</SolidColorBrush>
    <Style x:Key="后台按钮文本" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Foreground" Value="{StaticResource 后台按钮文本颜色}" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="FontSize" Value="40" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource 后台按钮失效文本颜色}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="后台按钮边框" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource 后台按钮边框颜色}"/>
        <Setter Property="CornerRadius" Value="20" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource 后台按钮颜色}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource 后台按钮失效颜色}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="后台按钮" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="250" />
        <Setter Property="Height" Value="120" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border IsEnabled="{TemplateBinding Control.IsEnabled}" Style="{StaticResource 后台按钮边框}">
                        <ContentPresenter>
                            <ContentPresenter.Content>
                                <TextBlock
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                                 Style="{StaticResource 后台按钮文本}"
                                                 Text="{TemplateBinding ContentControl.Content}">
                                </TextBlock>
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>